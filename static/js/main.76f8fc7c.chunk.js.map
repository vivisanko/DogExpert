{"version":3,"sources":["reducers/dogs.js","actions/actionTypes.js","reducers/user.js","reducers/game.js","reducers/index.js","helpers/defineUrl.js","actions/dogs.js","pages/main/Main.jsx","components/baseSelect/BaseSelect.jsx","components/settingsForm/SettingsForm.jsx","actions/game.js","actions/user.js","containers/SettingsFormContainer.jsx","pages/settings/Settings.jsx","components/game/Game.jsx","components/game/gameHelper.js","components/game/gameCreator.js","components/game/gameMove.js","containers/GameContainer.jsx","components/router/AppRouter.jsx","components/navigationPanel/NavigationPanel.jsx","App.jsx","containers/Root.jsx","index.js"],"names":["initialState","list","loading","error","dogs","state","arguments","length","undefined","action","type","Object","objectSpread","result","name","user","size","complexity","source","score","selectedDogs","game","activeDogs","filter","el","isActive","newSource","slice","forEach","id","newInActiveDogs","allReducers","combineReducers","urlDictionary","exactly","amount","dictionary","sourceApi","breed","concat","subBreed","random","breedRandom","subBreedRandom","keys","map","key","defineUrl","_ref","getDogsBegin","query","getDogsSuccess","getDogsFail","Main","react_default","a","createElement","BaseSelect","props","value","handleChange","options","labelName","optionList","text","className","htmlFor","onChange","defaultProps","SettingsForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","defineProperty","target","handleSubmit","_this$state","_this$props","changeSettings","changeName","_this$props2","_this2","_this$state2","placeholder","BaseSelect_BaseSelect","sizeOptions","complexityOptions","onClick","Component","createGameSuccess","changeGameSettings","nextMoveGame","setUserName","connect","dispatch","components_settingsForm_SettingsForm","Settings","containers_SettingsFormContainer","Game","createNewGame","createGame","selectDog","boxElem","index","dogClass","classNames","Game__boxElem_inactive","Game__boxElem_selected","some","dog","image","toString","role","onKeyUp","tabIndex","src","alt","randomInteger","max","Math","floor","createRandomBreeds","arr","randomArr","Array","pow","fill","randomIndex","push","createGameQuery","arrBreeds","createRandomSource","flatMap","message","img","shuffleSource","i","randomInd","asyncToGenerator","regenerator_default","mark","_callee","gameBreeds","gameQuery","urls","shuffleResult","wrap","_context","prev","next","Promise","all","url","fetch","then","resp","json","catch","console","log","sent","assign","t0","stop","_x","apply","gameMove","dog0","currentRound","dogsOneBreed","newSelectedDogs","diffScore","newScore","components_game_Game","AppRouter","Switch","Route","path","exact","component","GameContainer","NavigationPanel","linksList","links","link","Link","to","App","NavigationPanel_NavigationPanel","router_AppRouter","Root","store","err","react_redux_es","BrowserRouter","basename","createStore","applyMiddleware","thunk","logger","ReactDOM","render","containers_Root","document","getElementById"],"mappings":"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","file":"static/js/main.76f8fc7c.chunk.js","sourcesContent":["import * as types from \"../actions/actionTypes\";\r\n\r\n// const initialState = {\r\n//   list: {},\r\n//   breedsCollection: {},\r\n//   subBreedCollection: {}\r\n// };\r\nconst initialState = {\r\n  list: {},\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\nconst dogs = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GET_DOGS_BEGIN:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n    case types.GET_DOGS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        list: action.result\r\n      };\r\n    case types.GET_DOGS_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default dogs;\r\n","export const GET_DOGS_BEGIN = \"GET_DOGS_BEGIN\";\r\nexport const GET_DOGS_SUCCESS = \"GET_DOGS_SUCCESS\";\r\nexport const GET_DOGS_FAIL = \"GET_DOGS_FAIL\";\r\nexport const SET_USER_NAME = \"SET_USER_NAME\";\r\nexport const CREATE_NEW_GAME = \"CREATE_NEW_GAME\";\r\nexport const CREATE_GAME_SUCCESS = \"CREATE_GAME_SUCCESS\";\r\nexport const CREATE_GAME_FAIL = \"CREATE_GAME_FAIL\";\r\nexport const CHANGE_GAME_SETTINGS = \"CHANGE_GAME_SETTINGS\";\r\nexport const FINISH_GAME = \"FINISH_GAME\";\r\nexport const NEXT_MOVE_GAME = \"NEXT_MOVE_GAME\";\r\n","import * as types from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  name: \"\"\r\n};\r\nconst user = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.SET_USER_NAME:\r\n      return {\r\n        ...state,\r\n        name: action.name\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default user;\r\n","import * as types from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  size: 4,\r\n  complexity: 2,\r\n  loading: false,\r\n  error: null,\r\n  source: [],\r\n  score: 0,\r\n  selectedDogs: []\r\n};\r\n\r\nconst game = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.CREATE_NEW_GAME:\r\n      return {\r\n        ...state,\r\n        source: [],\r\n        loading: true,\r\n        error: null\r\n      };\r\n    case types.CREATE_GAME_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        source: action.result\r\n      };\r\n    case types.CREATE_GAME_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error\r\n      };\r\n    case types.FINISH_GAME: {\r\n      const activeDogs = state.source.filter(el => el.isActive);\r\n      const newSource = state.source.slice();\r\n      activeDogs.forEach(el => {\r\n        newSource[el.id].isActive = false;\r\n      });\r\n      return {\r\n        ...state,\r\n        score: action.score,\r\n        source: newSource,\r\n        selectedDogs: []\r\n      };\r\n    }\r\n    case types.CHANGE_GAME_SETTINGS:\r\n      return {\r\n        ...state,\r\n        size: action.size,\r\n        complexity: action.complexity\r\n      };\r\n    case types.NEXT_MOVE_GAME: {\r\n      const newSource = state.source.slice();\r\n      action.newInActiveDogs.forEach(el => {\r\n        newSource[el.id] = el;\r\n      });\r\n      return {\r\n        ...state,\r\n        source: newSource,\r\n        selectedDogs: action.selectedDogs,\r\n        score: action.score\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default game;\r\n","import { combineReducers } from \"redux\";\r\nimport dogs from \"./dogs\";\r\nimport user from \"./user\";\r\nimport game from \"./game\";\r\n\r\nconst allReducers = combineReducers({\r\n  dogs,\r\n  user,\r\n  game\r\n});\r\n\r\nexport default allReducers;\r\n","export const urlDictionary = (exactly, amount) => {\r\n  const dictionary = {};\r\n  const sourceApi = {\r\n    list: \"https://dog.ceo/api/breeds/list/all\",\r\n    breed: `https://dog.ceo/api/breed/${exactly}/images`,\r\n    subBreed: `https://dog.ceo/api/breed/${exactly}/images`,\r\n    random: `https://dog.ceo/api/breeds/image/random/${amount}`,\r\n    breedRandom: `https://dog.ceo/api/breed/${exactly}/images/random/${amount}`,\r\n    subBreedRandom: `https://dog.ceo/api/breed/${exactly}/images/random/${amount}`\r\n  };\r\n  Object.keys(sourceApi).map(key => {\r\n    dictionary[key] = sourceApi[key];\r\n    return dictionary;\r\n  });\r\n  return dictionary;\r\n};\r\n\r\nexport function defineUrl({ source, exactly, amount }) {\r\n  const url = urlDictionary(exactly, amount);\r\n  return url[source];\r\n}\r\n","import * as types from \"./actionTypes\";\r\nimport { defineUrl } from \"../helpers/defineUrl\";\r\n\r\nexport const getDogsBegin = query => ({\r\n  type: types.GET_DOGS_BEGIN,\r\n  query\r\n});\r\n\r\nexport const getDogsSuccess = (query, result) => ({\r\n  type: types.GET_DOGS_SUCCESS,\r\n  query,\r\n  result\r\n});\r\n\r\nexport const getDogsFail = error => ({\r\n  type: types.GET_DOGS_FAIL,\r\n  error\r\n});\r\n\r\nexport function fetchDogs(query) {\r\n  return dispatch => {\r\n    dispatch(getDogsBegin(query));\r\n    return fetch(defineUrl(query))\r\n      .then(resp => resp.json())\r\n      .then(result => dispatch(getDogsSuccess(query, result.message)))\r\n      .catch(err => {\r\n        // eslint-disable-next-line\r\n        console.log(\"err\", err);\r\n        return dispatch(getDogsFail(err));\r\n      });\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\nconst Main = () => <div>Hello</div>;\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./BaseSelect.css\";\r\n\r\nexport default function BaseSelect(props) {\r\n  const { id, value, handleChange, options, labelName } = props;\r\n  const optionList = options.map(el => (\r\n    <option value={el.value} key={`${el.value}${id}`}>\r\n      {el.text}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <label className=\"BaseSelect\" htmlFor={id}>\r\n      <span>{labelName}</span>\r\n      <select\r\n        className=\"BaseSelect__options\"\r\n        id={id}\r\n        value={value}\r\n        onChange={handleChange}\r\n      >\r\n        {optionList}\r\n      </select>\r\n    </label>\r\n  );\r\n}\r\nBaseSelect.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.number,\r\n      text: PropTypes.string\r\n    })\r\n  ).isRequired,\r\n  labelName: PropTypes.string\r\n};\r\nBaseSelect.defaultProps = {\r\n  labelName: \"\"\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./SettingsForm.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport BaseSelect from \"../baseSelect/BaseSelect\";\r\nimport { sizeOptions, complexityOptions } from \"./suggestedOptions.json\";\r\n\r\nclass SettingsForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: \"\",\r\n      size: 4,\r\n      complexity: 2\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { name, size, complexity } = this.props;\r\n    this.setState({\r\n      name,\r\n      size,\r\n      complexity\r\n    });\r\n  }\r\n\r\n  handleChange = event =>\r\n    this.setState({ [event.target.id]: event.target.value });\r\n\r\n  handleSubmit = () => {\r\n    const { name, size, complexity } = this.state;\r\n    const { changeSettings, changeName } = this.props;\r\n    changeSettings(+size, +complexity);\r\n    changeName(name);\r\n  };\r\n\r\n  render() {\r\n    const { name, size, complexity } = this.state;\r\n\r\n    return (\r\n      <form className=\"SettingsForm\">\r\n        <h3>Preferences</h3>\r\n\r\n        <label className=\"SettingsForm__preferencesElement\" htmlFor=\"name\">\r\n          <span>name:</span>\r\n          <input\r\n            className=\"SettingsForm__input\"\r\n            type=\"text\"\r\n            id=\"name\"\r\n            placeholder=\"your name\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <BaseSelect\r\n          id=\"size\"\r\n          value={+size}\r\n          handleChange={event => this.handleChange(event)}\r\n          options={sizeOptions}\r\n          labelName=\"select game size:\"\r\n        />\r\n        <BaseSelect\r\n          id=\"complexity\"\r\n          value={+complexity}\r\n          handleChange={event => this.handleChange(event)}\r\n          options={complexityOptions}\r\n          labelName=\"select game complexity:\"\r\n        />\r\n        <div>\r\n          <button\r\n            className=\"SettingsForm__button\"\r\n            type=\"button\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Set preferences\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nSettingsForm.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  size: PropTypes.number.isRequired,\r\n  complexity: PropTypes.number.isRequired,\r\n  changeSettings: PropTypes.func.isRequired,\r\n  changeName: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SettingsForm;\r\n","import * as types from \"./actionTypes\";\r\n\r\nexport const createNewGame = () => ({\r\n  type: types.CREATE_NEW_GAME\r\n});\r\n\r\nexport const createGameSuccess = result => ({\r\n  type: types.CREATE_GAME_SUCCESS,\r\n  result\r\n});\r\n\r\nexport const createGameFail = error => ({\r\n  type: types.CREATE_GAME_FAIL,\r\n  error\r\n});\r\n\r\nexport const finishGame = score => ({\r\n  type: types.FINISH_GAME,\r\n  score\r\n});\r\n\r\nexport const changeGameSettings = (size, complexity) => ({\r\n  type: types.CHANGE_GAME_SETTINGS,\r\n  size,\r\n  complexity\r\n});\r\n\r\nexport const nextMoveGame = (selectedDogs, newInActiveDogs, score) => ({\r\n  type: types.NEXT_MOVE_GAME,\r\n  selectedDogs,\r\n  newInActiveDogs,\r\n  score\r\n});\r\n","import * as types from \"./actionTypes\";\r\n\r\nconst setUserName = name => ({\r\n  type: types.SET_USER_NAME,\r\n  name\r\n});\r\n\r\nexport default setUserName;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SettingsForm from \"../components/settingsForm/SettingsForm\";\r\nimport { changeGameSettings } from \"../actions/game\";\r\nimport setUserName from \"../actions/user\";\r\n\r\nconst SettingsFormContainer = props => <SettingsForm {...props} />;\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    changeSettings: (size, complexity) =>\r\n      dispatch(changeGameSettings(size, complexity)),\r\n    changeName: name => dispatch(setUserName(name))\r\n  };\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  size: state.game.size,\r\n  complexity: state.game.complexity,\r\n  name: state.user.name\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SettingsFormContainer);\r\n","import React, { Component } from \"react\";\r\nimport \"./Settings.css\";\r\nimport SettingsFormContainer from \"../../containers/SettingsFormContainer\";\r\n\r\nclass Settings extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Settings\">\r\n        <SettingsFormContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Settings;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Game.css\";\r\nimport classNames from \"classnames\";\r\n\r\nclass Game extends Component {\r\n  componentDidMount() {\r\n    this.createNewGame();\r\n  }\r\n\r\n  createNewGame = () => {\r\n    const { size, list, createGame, complexity } = this.props;\r\n    createGame(size, list, complexity);\r\n  };\r\n\r\n  render() {\r\n    const { source, selectDog, selectedDogs, game } = this.props;\r\n    const boxElem = source.map((el, index) => {\r\n      const dogClass = classNames(\"Game__boxElem\", {\r\n        Game__boxElem_inactive: !el.isActive,\r\n        Game__boxElem_selected:\r\n          selectedDogs.length !== 0 &&\r\n          selectedDogs.some(dog => dog.id === el.id)\r\n      });\r\n      return (\r\n        <div\r\n          key={`${el.image}_${index.toString()}`}\r\n          className={dogClass}\r\n          role=\"button\"\r\n          onClick={() => selectDog(el, game)}\r\n          onKeyUp={() => {}}\r\n          tabIndex=\"-1\"\r\n        >\r\n          <img className=\"Game__boxImage\" src={el.image} alt=\"dog\" />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"Game\">\r\n        <div className=\"Game__moveDescription\">\r\n          <p>Find dogs of the same breed</p>\r\n          <p>\r\n            <span className=\"Game__description\">selected breed: </span>\r\n            {selectedDogs.length !== 0 ? selectedDogs[0].breed : \"\"}\r\n          </p>\r\n          <p>\r\n            <span className=\"Game__description\">score: </span>\r\n            {game.score}\r\n          </p>\r\n          <div className=\"Game__navigation\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"Game__buttonNew\"\r\n              onClick={this.createNewGame}\r\n            >\r\n              Start another game\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"Game__area\">{boxElem}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGame.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n  selectDog: PropTypes.func.isRequired,\r\n  selectedDogs: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  list: PropTypes.objectOf(\r\n    PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\r\n  ).isRequired,\r\n  source: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      breed: PropTypes.string,\r\n      image: PropTypes.string\r\n    })\r\n  ).isRequired,\r\n  size: PropTypes.number.isRequired,\r\n  complexity: PropTypes.number.isRequired,\r\n  game: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Game;\r\n","const randomInteger = max => {\r\n  let random = Math.random() * max;\r\n  random = Math.floor(random);\r\n  return random;\r\n};\r\n\r\nexport const createRandomBreeds = (size, arr, complexity) => {\r\n  const randomArr = new Array(size ** 2 / complexity).fill(true);\r\n  const result = [];\r\n  randomArr.forEach(() => {\r\n    const randomIndex = randomInteger(arr.length);\r\n    result.push(arr[randomIndex]);\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nexport const createGameQuery = (arrBreeds, complexity) => {\r\n  const query = arrBreeds.map(breed => {\r\n    const params = {\r\n      source: \"breedRandom\",\r\n      exactly: breed,\r\n      amount: complexity\r\n    };\r\n    return params;\r\n  });\r\n  return query;\r\n};\r\n\r\nexport const createRandomSource = arr =>\r\n  arr.flatMap(el => el.message.map(img => ({ breed: el.exactly, image: img })));\r\n\r\nexport const shuffleSource = arr => {\r\n  const result = arr;\r\n  if (arr !== undefined) {\r\n    for (let i = 0; i < result.length; i += 1) {\r\n      const el = result[i];\r\n      const randomInd = randomInteger(result.length);\r\n      result[i] = result[randomInd];\r\n      result[randomInd] = el;\r\n    }\r\n    for (let i = 0; i < result.length; i += 1) {\r\n      result[i].id = i;\r\n      result[i].isActive = true;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","import { defineUrl } from \"../../helpers/defineUrl\";\r\nimport {\r\n  createRandomBreeds,\r\n  createGameQuery,\r\n  createRandomSource,\r\n  shuffleSource\r\n} from \"./gameHelper\";\r\nimport {\r\n  createNewGame,\r\n  createGameSuccess,\r\n  createGameFail\r\n} from \"../../actions/game\";\r\n\r\nconst createGame = (size, list, complexity) => async dispatch => {\r\n  if (Object.keys(list).length > 0) {\r\n    dispatch(createNewGame());\r\n    const gameBreeds = createRandomBreeds(size, Object.keys(list), complexity);\r\n    const gameQuery = createGameQuery(gameBreeds, complexity);\r\n    const urls = gameQuery.map(query => defineUrl(query));\r\n    try {\r\n      const arr = await Promise.all(\r\n        urls.map(url => {\r\n          const message = fetch(url)\r\n            .then(resp => resp.json())\r\n            .then(result => result)\r\n            .catch(error => {\r\n              // eslint-disable-next-line\r\n              console.log(\"error\", error);\r\n            });\r\n          return message;\r\n        })\r\n      );\r\n      arr.forEach((el, index) => {\r\n        Object.assign(gameQuery[index], el);\r\n      });\r\n      const result = createRandomSource(gameQuery);\r\n      const shuffleResult = shuffleSource(result);\r\n      dispatch(createGameSuccess(shuffleResult));\r\n    } catch (error) {\r\n      dispatch(createGameFail(error));\r\n    }\r\n  }\r\n};\r\n\r\nexport default createGame;\r\n","import { nextMoveGame, finishGame } from \"../../actions/game\";\r\n\r\nconst gameMove = (dog, game) => dispatch => {\r\n  if (game.selectedDogs.length === 0) {\r\n    const newSelectedDogs = [dog];\r\n    return dispatch(nextMoveGame(newSelectedDogs, [], game.score));\r\n  }\r\n\r\n  const dog0 = game.selectedDogs[0];\r\n  const isMatch =\r\n    dog.breed === dog0.breed &&\r\n    game.selectedDogs.filter(el => el.id === dog.id).length === 0;\r\n  if (!isMatch) {\r\n    return dispatch(nextMoveGame([], [], game.score));\r\n  }\r\n  const currentRound = game.selectedDogs.length + 1 < game.complexity;\r\n  const dogsOneBreed = game.selectedDogs.concat(dog);\r\n  const newSelectedDogs = currentRound ? dogsOneBreed : [];\r\n  const newInActiveDogs = currentRound ? [] : dogsOneBreed;\r\n  let diffScore = 0;\r\n  if (newInActiveDogs.length !== 0) {\r\n    newInActiveDogs.forEach((el, index) => {\r\n      newInActiveDogs[index].isActive = false;\r\n      diffScore = game.complexity;\r\n    });\r\n  }\r\n  const newScore = game.score + diffScore;\r\n  const isGameOver = game.source.filter(el => el.isActive).length === 0;\r\n  if (isGameOver) {\r\n    return dispatch(finishGame(newScore));\r\n  }\r\n  return dispatch(nextMoveGame(newSelectedDogs, newInActiveDogs, newScore));\r\n};\r\nexport default gameMove;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Game from \"../components/game/Game\";\r\nimport createGame from \"../components/game/gameCreator\";\r\nimport gameMove from \"../components/game/gameMove\";\r\n\r\nconst GameContainer = props => <Game {...props} />;\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    createGame: (size, list, complexity) =>\r\n      dispatch(createGame(size, list, complexity)),\r\n    selectDog: (dog, game) => dispatch(gameMove(dog, game))\r\n  };\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  list: state.dogs.list,\r\n  size: state.game.size,\r\n  complexity: state.game.complexity,\r\n  game: state.game,\r\n  source: state.game.source,\r\n  selectedDogs: state.game.selectedDogs\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GameContainer);\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Main from \"../../pages/main/Main\";\r\nimport Settings from \"../../pages/settings/Settings\";\r\nimport GameContainer from \"../../containers/GameContainer\";\r\n\r\nconst AppRouter = () => (\r\n  <Switch>\r\n    <Route path=\"/game\" exact component={GameContainer} />\r\n    <Route path=\"/settings\" component={Settings} />\r\n    <Route path=\"/\" exact component={Main} />\r\n  </Switch>\r\n);\r\nexport default AppRouter;\r\n","import React from \"react\";\r\nimport \"./NavigationPanel.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function NavigationPanel({ links }) {\r\n  const linksList = links.map(link => (\r\n    <li className=\"NavigationPanel__item\" key={`${link.path}`}>\r\n      <Link className=\"NavigationPanel__link\" to={link.path}>\r\n        {link.name}\r\n      </Link>\r\n    </li>\r\n  ));\r\n  return (\r\n    <nav className=\"NavigationPanel\">\r\n      <ul className=\"NavigationPanel__list\">{linksList}</ul>\r\n    </nav>\r\n  );\r\n}\r\nNavigationPanel.propTypes = {\r\n  links: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      path: PropTypes.string,\r\n      name: PropTypes.string\r\n    })\r\n  ).isRequired\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AppRouter from \"./components/router/AppRouter\";\r\nimport NavigationPanel from \"./components/navigationPanel/NavigationPanel\";\r\nimport { links } from \"./components/navigationPanel/navigationRoutes.json\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App__header\">\r\n        <NavigationPanel links={links} />\r\n      </header>\r\n      <main className=\"App__main\">\r\n        <AppRouter />\r\n      </main>\r\n      <footer className=\"App__footer\" />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { fetchDogs } from \"../actions/dogs\";\r\n\r\nimport App from \"../App\";\r\n\r\nconst Root = ({ store }) => {\r\n  store.dispatch(\r\n    fetchDogs({\r\n      source: \"list\",\r\n      exactly: \"\",\r\n      amount: null\r\n    })\r\n  );\r\n  return (\r\n    <Provider store={store}>\r\n      <Router basename=\"/DogExpert\">\r\n        <Route path=\"/\" component={App} />\r\n      </Router>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nRoot.propTypes = {\r\n  store: PropTypes.shape({\r\n    dogs: PropTypes.any,\r\n    game: PropTypes.any,\r\n    user: PropTypes.any\r\n  }).isRequired\r\n};\r\n\r\nexport default Root;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport logger from \"redux-logger\";\r\nimport allReducers from \"./reducers\";\r\nimport \"./index.css\";\r\nimport Root from \"./containers/Root\";\r\n\r\nconst store = createStore(allReducers, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\r\n\r\nexport default store;\r\n"],"sourceRoot":""}